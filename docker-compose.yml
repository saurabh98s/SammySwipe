version: '3.8'

services:
  # Neo4j Database
  neo4j:
    build:
      context: .
      dockerfile: Dockerfile.neo4j
    ports:
      - "7474:7474"  # HTTP
      - "7687:7687"  # Bolt
    environment:
      - NEO4J_AUTH=neo4j/sammy_swipe_secret
      - NEO4J_server_memory_pagecache_size=1G
      - NEO4J_server_memory_heap_initial__size=1G
      - NEO4J_server_memory_heap_max__size=1G
      - NEO4J_dbms_connector_bolt_advertised__address=:7687
      - NEO4J_dbms_connector_http_advertised__address=:7474
      - NEO4J_dbms_default__listen__address=0.0.0.0
      - NEO4J_dbms_connector_bolt_listen__address=0.0.0.0:7687
      - NEO4J_dbms_connector_http_listen__address=0.0.0.0:7474
    volumes:
      - neo4j_data:/data
      - neo4j_logs:/logs
      - neo4j_import:/var/lib/neo4j/import
    networks:
      - sammy_net
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:7474"]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 30s

  # Data Initialization Service
  init:
    build:
      context: .
      dockerfile: Dockerfile.ml
    volumes:
      - ./ml:/app/ml
    environment:
      - NEO4J_URI=bolt://neo4j:7687
      - NEO4J_USER=neo4j
      - NEO4J_PASSWORD=sammy_swipe_secret
      - PYTHONPATH=/app
    depends_on:
      neo4j:
        condition: service_healthy
    networks:
      - sammy_net
    command: >
      sh -c "
        echo 'Initializing data...' &&
        python -m ml.data.init_data &&
        echo 'Training models...' &&
        python -m ml.training.train
      "
    restart: "no"

  # Backend API
  backend:
    build:
      context: .
      dockerfile: Dockerfile.backend
    ports:
      - "8000:8000"
    environment:
      - NEO4J_URI=bolt://neo4j:7687
      - NEO4J_USER=neo4j
      - NEO4J_PASSWORD=sammy_swipe_secret
      - JWT_SECRET_KEY=your_secure_jwt_key_here
      - MODEL_PATH=/app/ml/models
      - PYTHONPATH=/app
    volumes:
      - ./ml:/app/ml
      - ./backend:/app/backend
    depends_on:
      neo4j:
        condition: service_healthy
    networks:
      - sammy_net
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/v1/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend
  frontend:
    build:
      context: .
      dockerfile: Dockerfile.frontend
    ports:
      - "8501:8501"
    environment:
      - API_URL=http://backend:8000/api/v1
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - sammy_net

networks:
  sammy_net:
    driver: bridge

volumes:
  neo4j_data:
  neo4j_logs:
  neo4j_import: 